Index: lib/xunit-file.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/xunit-file.js	(revision 5665c5c6e3582354295d126430bfeef15856fb1e)
+++ lib/xunit-file.js	(revision )
@@ -2,15 +2,10 @@
  * Module dependencies.
  */
 
-var mocha = require("mocha")
-  , Base = mocha.reporters.Base
-  , utils = mocha.utils
-  , escape = utils.escape
-  , config = require("../config.json")
-  , fs = require("fs")
-  , filePath = process.env.XUNIT_FILE || config.file || process.cwd() + "/xunit.xml"
-  , fd = fs.openSync(filePath, 'w', 0755)
-  , consoleOutput = config.consoleOutput || {};
+var Base = require('./base')
+  , utils = require('../utils')
+  , fs = require('fs')
+  , escape = utils.escape;
 
 /**
  * Save timer references to avoid Sinon interfering (see GH-237).
@@ -23,34 +18,33 @@
   , clearInterval = global.clearInterval;
 
 /**
- * Expose `XUnitFile`.
+ * Expose `XUnit`.
  */
 
-exports = module.exports = XUnitFile;
+exports = module.exports = XUnit;
 
 /**
- * Initialize a new `XUnitFile` reporter.
+ * Initialize a new `XUnit` reporter.
  *
  * @param {Runner} runner
  * @api public
  */
 
-function XUnitFile(runner) {
+function XUnit(runner, options) {
   Base.call(this, runner);
   var stats = this.stats
     , tests = []
     , self = this;
 
-  runner.on('suite', function(suite){
-    if(consoleOutput.suite){
-      console.log('  ' + suite.title);
+  if (options.reporterOptions && options.reporterOptions.output) {
+      if (! fs.createWriteStream) {
+          throw new Error('file output not supported in browser');
-    }
+      }
-  });
-
-  runner.on('test', function(test){
-    if(consoleOutput.test){
-      console.log('  â—¦ ' + test.title);
+      self.fileStream = fs.createWriteStream(options.reporterOptions.output);
-    }
+  }
+
+  runner.on('pending', function(test){
+    tests.push(test);
   });
 
   runner.on('pass', function(test){
@@ -58,62 +52,75 @@
   });
 
   runner.on('fail', function(test){
-    if(consoleOutput.fail){
-      console.log('  - ' + test.title);
-    }
     tests.push(test);
   });
 
-  runner.on('pending', function(test) {
-      tests.push(test);
-  });
-
   runner.on('end', function(){
-    
-    appendLine(tag('testsuite', {
+    self.write(tag('testsuite', {
         name: 'Mocha Tests'
       , tests: stats.tests
       , failures: stats.failures
       , errors: stats.failures
       , skipped: stats.tests - stats.failures - stats.passes
       , timestamp: (new Date).toUTCString()
-      , time: stats.duration / 1000
+      , time: (stats.duration / 1000) || 0
     }, false));
 
-    tests.forEach(test);
-    appendLine('</testsuite>');
-    fs.closeSync(fd);
+    tests.forEach(function(t) { self.test(t); });
+    self.write('</testsuite>');
   });
 }
 
 /**
+ * Override done to close the stream (if it's a file).
+ */
+XUnit.prototype.done = function(failures, fn) {
+    if (this.fileStream) {
+        this.fileStream.end(function() {
+            fn(failures);
+        });
+    } else {
+        fn(failures);
+    }
+};
+
+/**
  * Inherit from `Base.prototype`.
  */
 
-XUnitFile.prototype.__proto__ = Base.prototype;
+XUnit.prototype.__proto__ = Base.prototype;
 
 /**
+ * Write out the given line
+ */
+XUnit.prototype.write = function(line) {
+    if (this.fileStream) {
+        this.fileStream.write(line + '\n');
+    } else {
+        console.log(line);
+    }
+};
+
+/**
  * Output tag for the given `test.`
  */
 
-function test(test) {
+XUnit.prototype.test = function(test, ostream) {
   var attrs = {
       classname: test.parent.fullTitle()
     , name: test.title
-    // , time: test.duration / 1000 //old
-    ,time: test.duration ? test.duration / 1000 : 0 //new
+    , time: (test.duration / 1000) || 0
   };
 
   if ('failed' == test.state) {
     var err = test.err;
-    appendLine(tag('testcase', attrs, false, tag('failure', { message: escape(err.message) }, false, cdata(err.stack))));
+    this.write(tag('testcase', attrs, false, tag('failure', {}, false, cdata(escape(err.message) + "\n" + err.stack))));
   } else if (test.pending) {
-    delete attrs.time;
-    appendLine(tag('testcase', attrs, false, tag('skipped', {}, true)));
+    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));
   } else {
-    appendLine(tag('testcase', attrs, true) );
+    this.write(tag('testcase', attrs, true) );
   }
-}
+};
 
 /**
  * HTML tag helper.
@@ -139,11 +146,4 @@
 
 function cdata(str) {
   return '<![CDATA[' + escape(str) + ']]>';
-}
-
-function appendLine(line) {
-    if (process.env.LOG_XUNIT) {
-        console.log(line);
-    }
-    fs.writeSync(fd, line + "\n", null, 'utf8');
 }
