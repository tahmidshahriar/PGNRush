Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(date 1419257782000)
+++ package.json	(revision )
@@ -1,19 +1,39 @@
 {
-    "name": "xunit-file",
-    "description": "Basically the same reporter as mocha's xunit reporter, but writes the output in a file.",
+  "name": "xunit-file",
+  "description": "Basically the same reporter as mocha's xunit reporter, but writes the output in a file.",
-    "version": "0.0.5",
+  "version": "1.0.0",
-    "author": {
-        "name": "Matthias Jahn",
-        "email": "matthias.jahn@peerigon.com"
-    },
-    "contributors": [
+  "author": {
+    "name": "Matthias Jahn",
+    "email": "matthias.jahn@peerigon.com"
+  },
+  "contributors": [
-        { "name": "Matthias Jahn", "email": "matthias.jahn@peerigon.com" },
-        { "name": "Paul Torka", "email": "paul.torka@yahoo.de" },
-        { "name": "Peter Janes", "email": "peter.janes@ek3.com" }
+    {
+      "name": "Matthias Jahn",
+      "email": "matthias.jahn@peerigon.com"
+    },
+    {
+      "name": "Paul Torka",
+      "email": "paul.torka@peerigon.com"
+    },
+    {
+      "name": "Peter Janes",
+      "email": "peter.janes@ek3.com"
+    },
+    {
+      "name": "Johannes Ewald",
+      "email": "johannes.ewald@peerigon.com"
+    }
-    ],    
+  ],
-    "keywords" : ["mocha", "xunit", "file", "reporter"],
+  "keywords": [
+    "mocha",
+    "xunit",
+    "file",
+    "reporter"
+  ],
-    "main" : "lib/xunit-file.js",
+  "main": "lib/xunit-file.js",
-    "repository" : "git://github.com/peerigon/xunit-file.git",
+  "repository": "git://github.com/peerigon/xunit-file.git",
-    "license": "MIT"
-    
+  "license": "MIT",
+  "dependencies": {
+    "mocha": "^2.0.1"
+  }
 }
Index: lib/xunit-file.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/xunit-file.js	(date 1419257782000)
+++ lib/xunit-file.js	(revision )
@@ -6,11 +6,8 @@
   , Base = mocha.reporters.Base
   , utils = mocha.utils
   , escape = utils.escape
-  , config = require("../config.json")
   , fs = require("fs")
-  , filePath = process.env.XUNIT_FILE || config.file || process.cwd() + "/xunit.xml"
-  , fd = fs.openSync(filePath, 'w', 0755)
-  , consoleOutput = config.consoleOutput || {};
+  , filePath = process.env.XUNIT_FILE || process.cwd() + "/xunit.xml";
 
 /**
  * Save timer references to avoid Sinon interfering (see GH-237).
@@ -41,16 +38,10 @@
     , tests = []
     , self = this;
 
-  runner.on('suite', function(suite){
-    if(consoleOutput.suite){
-      console.log('  ' + suite.title);
-    }
-  });
+  self.fileStream = fs.createWriteStream(filePath);
 
-  runner.on('test', function(test){
-    if(consoleOutput.test){
-      console.log('  â—¦ ' + test.title);
-    }
+  runner.on('pending', function(test){
+    tests.push(test);
   });
 
   runner.on('pass', function(test){
@@ -58,62 +49,70 @@
   });
 
   runner.on('fail', function(test){
-    if(consoleOutput.fail){
-      console.log('  - ' + test.title);
-    }
     tests.push(test);
   });
 
-  runner.on('pending', function(test) {
-      tests.push(test);
-  });
-
   runner.on('end', function(){
-    
-    appendLine(tag('testsuite', {
+    self.write(tag('testsuite', {
         name: process.env.SUITE_NAME || 'Mocha Tests'
       , tests: stats.tests
       , failures: stats.failures
       , errors: stats.failures
       , skipped: stats.tests - stats.failures - stats.passes
       , timestamp: (new Date).toUTCString()
-      , time: stats.duration / 1000
+      , time: (stats.duration / 1000) || 0
     }, false));
 
-    tests.forEach(test);
-    appendLine('</testsuite>');
-    fs.closeSync(fd);
+    tests.forEach(function(t) { self.test(t); });
+    self.write('</testsuite>');
   });
 }
 
 /**
+ * Override done to close the stream (if it's a file).
+ */
+XUnitFile.prototype.done = function(failures, fn) {
+  this.fileStream.end(function() {
+    fn(failures);
+  });
+};
+
+/**
  * Inherit from `Base.prototype`.
  */
 
 XUnitFile.prototype.__proto__ = Base.prototype;
 
 /**
+ * Write out the given line
+ */
+XUnitFile.prototype.write = function(line) {
+  if (process.env.LOG_XUNIT) {
+    console.log(line);
+  }
+  this.fileStream.write(line + '\n');
+};
+
+/**
  * Output tag for the given `test.`
  */
 
-function test(test) {
+XUnitFile.prototype.test = function(test, ostream) {
   var attrs = {
       classname: test.parent.fullTitle()
     , name: test.title
-    // , time: test.duration / 1000 //old
-    ,time: test.duration ? test.duration / 1000 : 0 //new
+    , time: (test.duration / 1000) || 0
   };
 
   if ('failed' == test.state) {
     var err = test.err;
-    appendLine(tag('testcase', attrs, false, tag('failure', { message: escape(err.message) }, false, cdata(err.stack))));
+    this.write(tag('testcase', attrs, false, tag('failure', {}, false, cdata(escape(err.message) + "\n" + err.stack))));
   } else if (test.pending) {
-    delete attrs.time;
-    appendLine(tag('testcase', attrs, false, tag('skipped', {}, true)));
+    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));
   } else {
-    appendLine(tag('testcase', attrs, true) );
+    this.write(tag('testcase', attrs, true) );
   }
-}
+};
 
 /**
  * HTML tag helper.
@@ -139,11 +138,4 @@
 
 function cdata(str) {
   return '<![CDATA[' + escape(str) + ']]>';
-}
-
-function appendLine(line) {
-    if (process.env.LOG_XUNIT) {
-        console.log(line);
-    }
-    fs.writeSync(fd, line + "\n", null, 'utf8');
 }
